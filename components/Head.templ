package components

import (
	"fmt"

	"github.com/charmbracelet/log"
)

// throws an error if we forget to supply a `title` that's not just
// an empty string to the `Head` component
func formatTitle(title string) string {
	if title == "" {
		log.Fatalf("ERROR - You forgot to add a title")
	}
	return fmt.Sprintf("%s - Ben Smith", title)
}

// Renders all of the boilerplate that we want to inject into every page's
// `<head>` tag, allows for `children` to be passed to it so that we can
// extend the component with more `<link>`s and other relevant tags
templ Head(title string) {
	<head>
		<meta charset="utf-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta name="author" content="Ben Smith"/>
		<meta name="description" content="Description ..."/>
		<!-- <link href="site.favicon" rel="icon" type="image/svg+xml"/> -->
		<title>{ formatTitle(title) }</title>
		<!-- fonts -->
		<!-- inter font -->
		<link rel="preload" as="style" href="/fonts/inter/inter.css"/>
		<link rel="stylesheet" href="/fonts/inter/inter.css"/>
		<!-- young serif font -->
		<link rel="preload" as="style" href="/fonts/young-serif.css"/>
		<link rel="stylesheet" href="/fonts/young-serif.css"/>
		<!-- css -->
		<link rel="preload" as="style" href="/styles.css"/>
		<link rel="stylesheet" href="/styles.css"/>
		<!-- feeds -->
		if routesMap := GetRoutesMap(ctx); routesMap != nil {
			for route, routeEntry := range routesMap {
				switch routeEntry.FeedType {
					case "rss":
						<link
							rel="alternate"
							type="application/rss+xml"
							href={ route }
							title="RSS feed"
						/>
					case "atom":
						<link
							rel="alternate"
							type="application/atom+xml"
							href={ route }
							title="Atom feed"
						/>
					case "json":
						<link
							rel="alternate"
							type="application/feed+json"
							href={ route }
							title="JSON feed"
						/>
				}
			}
		}
		{ children... }
	</head>
}
