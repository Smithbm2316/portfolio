package components

import (
	"bensmith.sh/models"
	"slices"
)

// Validates that the `routesMap` context variable is valid and returns it
// Used to get access to the `routesMap` that contains a mapping of all of
// our routes/slugs to their relevant data that we need in different Templ
// pages and components
func GetRoutesMap(ctx context.Context) models.RoutesMap {
	if routesMap, ok := ctx.Value("routesMap").(models.RoutesMap); ok {
		return routesMap
	}
	return nil
}

// Takes a valid `routesMap` from context and renders a sorted slice of
// the links for the main navigation menu
func GetSortedNavLinks(routesMap models.RoutesMap) []models.Link {
	links := make([]models.Link, 0, 5)
	for route, routeEntry := range routesMap {
		if routeEntry.IsMainNavLink {
			links = append(links, models.Link{
				Url:  route,
				Text: routeEntry.Text,
			})
		}
	}

	// sort the links from longest strings to shortest, with our "/" homepage
	// sorted to the beginning of the list as well
	slices.SortFunc(links, func(a, b models.Link) int {
		if b.Url == "/" || len(a.Text) < len(b.Text) {
			return 1
		} else if a.Url == "/" || len(a.Text) > len(b.Text) {
			return -1
		} else {
			return 0
		}
	})

	return links
}

// Validates that the `currentRoute` context variable is valid and returns it.
// Used to get the route slug that is currently being rendered
func GetCurrentRoute(ctx context.Context) string {
	if route, ok := ctx.Value("currentRoute").(string); ok {
		return route
	}
	return ""
}

// Renders a `<body>` layout that contains a column for the `MainNav` component
// as well as a `<main>` tag that takes any `children` supplied to it. Use this
// generally in favor of the `MainNav` component directly
templ WithMainNav() {
	<body>
		<div class="with-main-nav">
			@MainNav()
			<main>
				{ children... }
			</main>
		</div>
		@ReturnToTop()
	</body>
}

// Renders a component that represents the main navigation menu for the site.
// Only use this component if you need *specific* control of the exact markup
// for the page. Otherwise, default to using the `WithMainNav` helper component
// which provides a sensible default layout containing this component
templ MainNav() {
	<header class="main-nav">
		<nav aria-label="Primary navigation">
			if routesMap := GetRoutesMap(ctx); routesMap != nil {
				<ul role="list">
					for _, link := range GetSortedNavLinks(routesMap) {
						<li>
							<a
								href={ templ.SafeURL(link.Url) }
								if link.Url == GetCurrentRoute(ctx) {
									aria-current="page"
								}
							>{ link.Text }</a>
						</li>
					}
				</ul>
			}
		</nav>
	</header>
}
