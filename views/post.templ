package views

import (
	"strings"
	"time"

	"bensmith.sh/models"
	"bensmith.sh/views/components"
)

func Slugify(text string) string {
	return strings.ReplaceAll(strings.ToLower(text), " ", "")
}

templ PostRoute(post *models.Post) {
	<html lang="en">
		@components.Head(post.Title) {
			<!--
        These need a `/src` prefix since we generate this file into the `src`
        directory for parcel to process, it'll strip the `/src` prefix in what
        it serves in development mode itself and what it bundles for production
      -->
			<link rel="preload" as="style" href="/src/chroma.css"/>
			<link rel="stylesheet" href="/src/chroma.css"/>
			@postStyles()
			@postTOCWebComponent()
		}
		<body>
			<main id="#top">
				<!-- main menu -->
				<nav aria-label="Primary navigation">
					@components.MainNavList()
				</nav>
				<!-- table of contents for the article, loads a progressively enhanced web component script -->
				<post-toc>
					<details>
						<summary id="article-toc-heading">
							Table of Contents
						</summary>
						if len(post.Headings) > 0 {
							<ul>
								<li>
									<a href="#top">Return to top</a>
								</li>
								for _, heading := range post.Headings {
									<li>
										<a href={ templ.SafeURL("#" + Slugify(heading.Text)) }>{ heading.Text }</a>
									</li>
								}
							</ul>
						}
					</details>
				</post-toc>
				<!-- the actual article content from the Markdown post -->
				<article>
					<h1>{ post.Title }</h1>
					<time datetime={ post.Published.Format(time.RFC3339) }>
						{ post.Published.Format("Monday, January 1, 2006") }
					</time>
					if len(post.Tags) > 0 {
						<ul>
							for _, tag := range post.Tags {
								<li>{ tag }</li>
							}
						</ul>
					}
					<section>
						@components.Unsafe(post.Content)
					</section>
				</article>
			</main>
		</body>
	</html>
}

templ postStyles() {
	<style>
    main {
      margin-inline: auto;
      margin-block: 0;

      @media (width >= 540px) {
        display: grid;
        grid-template-columns: 1fr 32ch 1fr;
        grid-template-areas: 'nav article toc';
        column-gap: 2rem;

        nav {
          grid-area: nav;
        }
        post-toc {
          grid-area: toc;
        }
        article {
          grid-area: article;
        }

        nav,
        post-toc {
          height: max-content;
          position: sticky;
          top: 0;
          padding-block-start: 15%;
          margin-block-start: 10%;
        }

        post-toc {
          justify-self: end;
        }
      }
    }

    post-toc > details {
      cursor: pointer;
    }
  </style>
}

templ postTOCWebComponent() {
	<script defer>
    window.customElements.define(
      'post-toc',
      class PostTOCElement extends HTMLElement {
        /**
         * If we are on our full-size layout, then we want to auto-expand the <details> element on page load so that the table of contents is easy to see. If we are on mobile and in a single-column view, we will keep the default <details> behavior of having the table of contents collapsed.
         */
        autoExpandOnDesktop() {
          if (window.innerWidth < 540) {
            return;
          }
          let detailsElement = this.querySelector(':scope details');
          if (!detailsElement) {
            return;
          }
          detailsElement.open = true;
        }

        connectedCallback() {
          this.autoExpandOnDesktop();
        }
      }
    );
  </script>
}
