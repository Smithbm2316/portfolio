package views

import (
	"strings"
	"time"

	"bensmith.sh/models"
	"bensmith.sh/views/components"
)

func Slugify(text string) string {
	return strings.ReplaceAll(strings.ToLower(text), " ", "")
}

var DevMode bool

templ PostRoute(post *models.Post) {
	<html lang="en">
		@components.Head(post.Title) {
			<!--
        These need a `/src` prefix since we generate this file into the `src`
        directory for parcel to process, it'll strip the `/src` prefix in what
        it serves in development mode itself and what it bundles for production
      -->
			<link rel="preload" as="style" href="/src/chroma.css"/>
			<link rel="stylesheet" href="/src/chroma.css"/>
			<!-- route-specific bundled styles -->
			<link rel="stylesheet" href="/styles/routes/post.css"/>
		}
		<body>
			<main>
				<article id="#top">
					<header style="grid-area: nav">
						<nav aria-label="Primary site navigation">
							@components.MainNavList()
						</nav>
					</header>
					<h1 style="grid-area: title">{ post.Title }</h1>
					<div style="grid-area: tags-date">
						<time datetime={ post.Published.Format(time.RFC3339) }>
							{ post.Published.Format("Monday, January 1, 2006") }
						</time>
						if len(post.Tags) > 0 {
							<ul>
								for _, tag := range post.Tags {
									<li>{ tag }</li>
								}
							</ul>
						}
					</div>
					<post-toc
						if len(post.Headings) == 0 {
							aria-hidden="true"
						}
						style="grid-area: toc"
					>
						if len(post.Headings) > 0 {
							<nav aria-labelledby="article-toc">
								<details>
									<summary id="article-toc">
										Table of Contents
									</summary>
									<ul>
										<li>
											<a href="#top">Return to top</a>
										</li>
										for _, heading := range post.Headings {
											<li>
												<a href={ templ.SafeURL("#" + Slugify(heading.Text)) }>{ heading.Text }</a>
											</li>
										}
									</ul>
								</details>
							</nav>
						}
					</post-toc>
					<div style="grid-area: content">
						@components.Unsafe(post.Content)
					</div>
				</article>
			</main>
			@postTOCWebComponent()
		</body>
	</html>
}

templ postTOCWebComponent() {
	<script defer>
    window.customElements.define(
      'post-toc',
      class PostTOCElement extends HTMLElement {
        /**
         * If we are on our full-size layout, then we want to auto-expand the <details> element on page load so that the table of contents is easy to see. If we are on mobile and in a single-column view, we will keep the default <details> behavior of having the table of contents collapsed.
         */
        autoExpandOnDesktop() {
          try {
            let detailsElement = this.querySelector(':scope details');
            let breakpoint = parseInt(getComputedStyle(detailsElement).getPropertyValue('--breakpoint'), 10);
            if (window.innerWidth >= breakpoint) {
              detailsElement.open = true;
            }
          } catch (err) {
            if (this.dataset.debug === "true") {
              console.log(err);
            }
          }
        }

        connectedCallback() {
          this.autoExpandOnDesktop();
        }
      }
    );
  </script>
}
