/* Load Inter font */
:root {
  font-family: var(--ff-sans);
  @supports (font-variation-settings: normal) {
    font-family: var(--ff-sans-var);
  }
  /* fix for Chrome */
  font-feature-settings:
    "liga" 1,
    "calt" 1;
}

body {
  background-color: var(--bg);
  color: var(--fg);
  font-size: var(--fs-base);
  min-height: 100vh;
  scroll-behavior: smooth;
  max-width: 120rem; /* 1920px */
  margin-inline: auto;

  @media (prefers-reduced-motion: reduce) {
    scroll-behavior: auto;
  }
}

/* setup default font family and sizes for headings */
h1,
h2,
h3,
h4,
h5,
h6 {
  color: var(--secondary);
  font-weight: 400;
  font-family: var(--ff-serif);
  @supports (font-variation-settings: normal) {
    font-family: var(--ff-serif-var);
  }
}
h1 {
  font-size: var(--fs-xxl);
}
h2 {
  font-size: var(--fs-xl);
}
h3,
h4 {
  font-size: var(--fs-lg);
}
h5,
h6 {
  font-size: var(--fs-md);
}

/* links should go from an inherited style to --primary by default */
:where(a) {
  color: inherit;
}
:where(a):is(:hover, :focus-visible, :active) {
  color: var(--primary);
}

/*
 * but if they're in an paragraph or are anchor links inside of a heading on one
 * of our blog posts (with [data-anchor="true"]), go from --primary to --fg
 */
:where(p) a,
:where(a[data-anchor="true"]) {
  color: var(--primary);
}
:where(p) a:is(:hover, :focus-visible, :active),
:where(a[data-anchor="true"]):is(:hover, :active, :focus-visible) {
  color: var(--fg);
}

/* disable link underline by default if it's a direct child of a heading element */
:where(h1, h2, h3, h4, h5, h6) > a {
  text-decoration: none;
}
:where(h1, h2, h3, h4, h5, h6) > a:is(:hover, :focus-visible, :active) {
  text-decoration: underline;
}

/* default styles for code blocks */
pre,
code {
  font-family: monospace;
}
pre {
  background-color: var(--bg);
  border: 0.3em solid var(--dark-600);
  font-size: var(--fs-sm);
  font-weight: 500;
  padding: 1em;
  overflow-x: auto;
}

/* 
 * when a scroll anchor is clicked, we'll use this animation to show a brief
 * flash of a background color to help the user see what piece of content
 * they were jumped to
 */
@keyframes bg-flash {
  from {
    background-color: var(--bg-flash);
  }
  to {
    background-color: transparent;
  }
}

/*
 * the main layout for the site. puts the main nav as a left sidebar when the
 * browser gives enough space, otherwise stacks it before the rest of the content
 */
.with-main-nav {
  container: layout / inline-size;

  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  column-gap: var(--gap-col);
  row-gap: var(--gap-row);
  padding: var(--viewport-padding);

  & > :first-child {
    flex-grow: 1;
    min-width: var(--sidebar);
  }

  & > :last-child {
    flex-basis: 0;
    flex-grow: 999;
    min-width: min(100%, var(--content));
  }
}

/*
 * uses a similar algorithm to the .with-main-nav class, but aligns a sidebar 
 * to the right of the first child of this class's containing element when
 * the browser gives enough space, otherwise it stacks that sidebar below
 * the existing content
 */
.with-sidebar-r {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: var(--gap-col);
  max-width: calc(var(--content) + var(--sidebar) + var(--gap-col));
  margin-inline-start: auto;

  & > :first-child {
    flex-grow: 999;
    flex-basis: min(100%, var(--content));
    max-width: var(--content);
  }

  & > :last-child {
    flex-grow: 1;
    flex-basis: var(--sidebar);
  }
}
