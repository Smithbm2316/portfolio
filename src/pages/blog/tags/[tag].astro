---
import Layout from '@layouts/Layout.astro';

interface TagItem {
  title: string;
  url: string;
}

type TagsData = Record<string, TagItem[]>;

export async function getStaticPaths() {
  const allPosts = await Astro.glob('../**/*.md');
  const publishedPosts = allPosts.filter((post) => !post.frontmatter.draft);
  const tagsData = publishedPosts.reduce((paths: TagsData, post) => {
    if (typeof post.frontmatter.tags === 'string') {
      if (!post.url || !post.frontmatter.title) {
        return paths;
      }

      const updatedPaths: TagsData = {};
      const tags = post.frontmatter.tags.split(', ');
      for (const tag of tags) {
        const existingTagData = paths[tag];
        if (Array.isArray(existingTagData)) {
          updatedPaths[tag] = [
            { url: post.url, title: post.frontmatter.title },
            ...existingTagData,
          ];
        } else {
          updatedPaths[tag] = [
            { url: post.url, title: post.frontmatter.title },
          ];
        }
      }
      return { ...paths, ...updatedPaths };
    }
    return paths;
  }, {});

  const result = Object.keys(tagsData).map((tag) => ({
    params: {
      tag,
    },
    props: {
      posts: tagsData[tag],
    },
  }));
  return result;
}

const { posts } = Astro.props;
const { tag: tagName } = Astro.params;
const tag = `#${tagName}`;
---

<Layout title={tag}>
  <section>
    <h1>{tag}</h1>
    <ul>
      {
        posts?.map((post: TagItem) => (
          <li>
            <a
              class='default-link'
              href={post.url}
            >
              {post.title}
            </a>
          </li>
        ))
      }
    </ul>
  </section>
</Layout>

<style>
  h2 {
    margin-block: 2rem;
  }

  li {
    margin-block: 1rem;
  }
  li::marker {
    color: var(--laserwave-maximumBlue);
    content: 'â€¢ ';
  }
</style>
